二叉树基本分类：
1、满二叉树
    只有度为零和度为二的节点，且所有度为零的节点都在通一层
2、完全二叉树
    对于一个深度为n的完全二叉树，前n-1层是满二叉树，而最后一层叶子节点数量不定，只需要满足从左到右连续即可
3、二叉搜索树
    也称二叉查找树，特点是对于任何一个节点，左孩子比父节点小，右孩子比父节点大。对于节点数量没要求，但得有顺序。
4、平衡二叉搜索树
    也称平衡二叉树，任一节点对应的两棵子树的最大高度差为1，且左右两棵子树都是平衡二叉树。

存储方式：
链式存储（典型）
线性存储：
    比如用数组或者slice存放完全二叉树abcdef，对应节点位置为0，1，2，3，4，5.
    那么任意元素的子节点就是2n+1、2n+2，比如这里a节点的两个孩子就是bc，b节点的两个孩子为2*1+？，为de，c节点的左孩子为f。

二叉树遍历：
    深度优先：一直搜索到终点，然后再回退换方向继续，前/中/后序遍历都是深度优先搜索，使用递归(或者转迭代实现)
    广度优先：典型的就是层序遍历，使用一个队列做迭代。


二叉树三种遍历方式：（例：中、左(子树)、右(子树)）
    5                       前序遍历：5 4 1 2 6 7 8
  4   6                     中序遍历：1 4 2 5 7 6 8
 1 2 7 8                    后序遍历：1 2 4 7 8 6 5
          A
       B     C
     D   E                  前序遍历：中、左、右  A B D F G H I E C
   F   G                    中序遍历：左、中、右  F D H G I B E A C
      H I                   后序遍历：左、右、中  F H I G D E B C A




中序遍历：
左中右
find(val)
if node.value != val{
    funcName(Noe.left)
    slice=append(slice,node)
    funcName(Node.right)
}