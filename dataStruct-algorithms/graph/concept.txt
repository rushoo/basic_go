/*
-------图-------
基本概念：
一个图Graph = (N, E)，由节点集N和边集E组成，每一条边都是一对节点的连接。
两个相连的节点互为邻节点，一个节点的度为与其相连接的节点的数量。
如果节点到节点是有序的，那么图就是有向的，也称作有向图。
图中的一条路径是一个节点序列，路径的长度就是该节点序列中边的数量，
节点数量为m的路径，这m个节点之间应该有m-1条边，该路径的长度就是m-1.
从一个节点到达其自身也可以视作一条路径，路径长度为0，这是为了方便而做的约定。
如果一个节点经过若干节点到达自身，那这种路径就形成了一个环，我们要讨论的图一般都是无环的。
一条简单路径上所有的节点都是互异的，但第一个顶点和最后一个顶点可能相同。

有向图中的圈是起始节点和终结点相同且长度至少为1的路径，如果路径是简单路径，那么这就是简单圈。
对于无向图要求边也是互异的，比如(u,v)和(v,u)，在无向图中他们就是同一条边，如果是在有向图中，那么这两条边
因为方向不同而区别，因此能构成一个圈。如果一个有向图无圈，那么就是有向无圈图（DAG）。

如果一个无向图中从每一个节点到其它任一节点都存在一条路径（是路径而不是边！），则该无向图称为连通图，对应的有向图就是强连通的。
如果一个有向图不是强连通的，但不考虑节点之间的方向而作为无向图是连通图，那么这种有向图就是弱连通的。
完全图的每对顶点之间都存在一条边。

图的表示方法：
1、邻接矩阵表示法：
邻接矩阵是最容易理解的表示方法，优点是简单易懂，缺点是可能会占用很多存储空间。以图的节点数量长度构造二维数组，table[i][j]表示第i个节点到第j个节点是否直接相连，值为0或1.
-对于无向图，
table[i][j]与table[j][i]表示为同一条边，二者的值相等，所以无向图的邻接矩阵是对称的，对角线上都为0.
求某节点的度，假设要知道第二个节点的度，那么就是求table[1][j]=1时j的值有哪些，对应的结果都是与第二个节点相连的边。
求第i个节点的度，结果就是二维数组中第i行里值为1的元素的数量。
特别的，对于完全图，它的邻接矩阵除了对角线元素为0，其他的值都是1(这反映了任一节点都与其它所有节点直接相连)。
-对于有向图，
table[i][j]的值就表示为第i-->第j是否相连，每一行代表了当前元素的出度边(从它出发)，每一列就代表了当前元素的入度边(指向它)。
在有向图中求某个节点的度，根据定义就是入度边+出度边，即对应着i行与i列所有非零元素(数量)之和。
-有权图(有向网)，
与有向图的类似，对于任意的table[i][j]，比如table[1][3]=5，它表示第二个节点到第四个节点的权值为5，如果不可达，那么距离/权值就是∞(无穷大),在实际操作中可以较大的数替代。
优缺点：
优点：直观易于理解，任意两点是否连接、求某个节点的度都比较容易
缺点：不利于增删节点，对于稀疏图而言空间浪费严重，统计边的数量需要做n*n遍历效率太低。

2、邻接表表示法：
由数组和链表结构组合实现。由一个数组存取每一个节点，每个节点都有数据域和指针域，指针指向其它相邻节点。
无向图的邻接表：
假设节点数组【A，B，C，D】，其中A--B,A--C,B--D是三条边，那么数组里A元素开始的链表为A-->Bi-->Ci,数组里第二个元素B开始的链表
表示为B-->Ai-->Di,类似的数组后两个元素C-->Ai, D-->Bi（注意是无向图，A-->Bi也意味着同时存在B-->Ai，其中Xi表示X在数组中的元素下标）
特点：
邻接表不唯一，因为A的两个邻接点可以同时表示为A-->Bi-->Ci,也可以表示为A-->Ci-->Bi
若无向图中有n个节点和e条边，则邻接表需要n个头节点和2e个表节点表示边的关系。
某个节点的度为该节点出发链表上节点的数量。

有向图的邻接表：
和无向图的表示类似，差异仅仅表现为连接的单向了，如A-->B与B-->A无关。
特点：
邻接表不唯一
若有向图中有n个节点和e条边，则邻接表需要n个头节点和e（不是2e了喔）个表节点表示边的关系。
某个节点的出度为该节点出发链表上节点的数量，找节点的入度需要遍历全表。（逆邻接表恰好相反，找入度易出度难）

优缺点：
优点：方便查找某个节点的邻接点，节约稀疏图的存储空间，对于无向图中某一节点的度也很方便计算
缺点：对于某两个节点之间是否存在连接关系需要遍历查找，计算有向图节点的度困难（改进十字链表），无向图每条边需要查找两遍（改进邻接多重表）。

*/
